{
{
// Sentinel must be deployed and actively connected to Azure AD via the Microsoft Entra ID data connector
// The Logic App must be linked to Azure Sentinel as an automated response playbook (via Automation Rules)
// The triggering analytic rule (e.g., "Multiple failed sign-ins followed by success") must be enabled and generate alerts
// Alert schema must include 'Properties.Entities[].UPN' (user principal name) to correctly resolve the target user
// The Logic App must have Graph API permissions to modify user accounts (User.ReadWrite.All or equivalent)
// Graph API must be authenticated (preferably via a managed identity with necessary role assignments)
// User accounts must exist in Microsoft Entra ID (formerly Azure AD), and the UPN must be resolvable
// User accounts must not be federated in a way that blocks programmatic disablement
// The 'office365' connector must be provisioned and authorized in the Logic App’s resource group
// The security group email address (e.g., secops@yourdomain.com) must exist and be able to receive external notifications
// The mailbox must not reject automated alerts (e.g., no rule to auto-delete based on sender)
// A Microsoft Teams channel must be set up with an Incoming Webhook connector
// The webhook URL used in the 'Send_Alert_To_Teams' action must be active and correct
// Users monitoring the channel must have permission to view alerts (or participate in incident response)
// The Sentinel alert must include a 'Properties' object with a structured 'Entities' array
// The 'UPN' (user principal name) must be present for the Graph API call to function correctly
// If multiple users are included in a single alert, a For_each loop should be used (currently not implemented in template)
// The Logic App must be deployed in a region with access to Graph API and Office 365 endpoints (no outbound network restrictions)
// Logic App runtime must be allowed to call external APIs (e.g., firewall rules, NSGs, private DNS, etc.)
// All required connectors (Graph API, Office 365, HTTP) must be authorized and not expired




// The JSON schema this ARM template adheres to
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",

  // Template version
  "contentVersion": "1.0.0.0",

  // Parameters allow external configuration of variables (e.g., the Logic App name)
  "parameters": {
    "logicAppName": {
      "type": "string",
      "defaultValue": "Block-AADUser-And-Notify"
    }
  },

  // ARM resource definitions
  "resources": [
    {
      // Specifies that we're deploying a Logic App
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[parameters('logicAppName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        // Logic App workflow definition
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",

          "actions": {
            // Step 1: Parse the alert that triggered this playbook
            "Parse_Alert": {
              "type": "ParseJson",
              "inputs": {
                "content": "@triggerBody()?['Properties']",  // Access the 'Properties' section of the alert
                "schema": {
                  "type": "object",
                  "properties": {
                    "Entities": {
                      "type": "array"  // We expect the alert to include an array of entities (e.g., users)
                    }
                  }
                }
              },
              "runAfter": {}
            },

            // Step 2: Disable the user account in Azure AD (Graph API call)
            "Block_User": {
              "type": "Http",
              "inputs": {
                "method": "POST",
                "uri": "https://graph.microsoft.com/v1.0/users/@{items('For_each')?['UPN']}/accountEnabled",
                "headers": {
                  "Content-Type": "application/json"
                },
                "body": "{\"accountEnabled\": false}"  // Disables the user account
              },
              "runAfter": {
                "Parse_Alert": ["Succeeded"]
              }
            },

            // Step 3: Send a Teams alert to a specified channel via webhook
            "Send_Alert_To_Teams": {
              "type": "Http",
              "inputs": {
                "method": "POST",
                "uri": "https://YOUR-TEAMS-WEBHOOK-URL",  // Replace with actual Teams webhook
                "headers": {
                  "Content-Type": "application/json"
                },
                "body": {
                  "@type": "MessageCard",
                  "@context": "http://schema.org/extensions",
                  "summary": "Sentinel Alert - Credential Abuse",
                  "themeColor": "FF0000",  // Red alert color
                  "title": "⚠️ Azure AD User Blocked",
                  "text": "User `@{items('For_each')?['UPN']}` was disabled due to a suspicious sign-in alert."
                }
              },
              "runAfter": {
                "Block_User": ["Succeeded"]
              }
            },

            // Step 4: Email notification to a security distribution group
            "Send_Email_To_Security_Group": {
              "type": "ApiConnection",  // Uses a Logic Apps connector (Office 365 Outlook)
              "inputs": {
                "method": "post",
                "path": "/v2/Mail",  // API path for sending email
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['office365']['connectionId']"
                  }
                },
                "body": {
                  "To": ["secops@yourdomain.com"],  // Replace with your group email
                  "Subject": "Azure Sentinel Alert: AAD User Blocked",
                  "Body": "User @{items('For_each')?['UPN']} was blocked due to credential-based attack indicators."
                }
              },
              "runAfter": {
                "Send_Alert_To_Teams": ["Succeeded"]
              }
            }
          },

          // Trigger: this Logic App runs when called by an Azure Sentinel alert
          "triggers": {
            "When_a_response_to_an_Azure_Sentinel_alert_is_triggered": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {}  // Accepts any schema — expects alert details via POST
              }
            }
          },

          "outputs": {}
        },

        // No additional parameters used inside the Logic App definition
        "parameters": {},

        // Runtime config (e.g., max content size the Logic App will accept)
        "runtimeConfiguration": {
          "contentTransfer": {
            "maximumContentSize": 104857600  // ~100MB
          }
        }
      }
    }
  ]
}
